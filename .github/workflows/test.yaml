name: "Test Features"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: false
    strategy:
      matrix:
        features:
          # Test base features first (no dependencies)
          - alpine-bash
          - alpine-build-base
          - alpine-git
          - alpine-jq
          - alpine-make
          - alpine-node
          - alpine-python
          # Then test features with dependencies
          - alpine-angular
          - alpine-chromium
          - alpine-dotnet
          - alpine-gulp
          - alpine-jekyll
          - alpine-next
          - alpine-pip
          - alpine-puppeteer
          - alpine-ruby
          - alpine-workbox
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test feature '${{ matrix.features }}'
        id: test
        run: |
          echo "Testing feature: ${{ matrix.features }}"
          if [ -f "./test/${{ matrix.features }}/test.sh" ]; then
            # Run the basic test to ensure the feature installs correctly
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.features }} \
              --base-image alpine:latest \
              --skip-scenarios \
              --log-level debug
          else
            echo "No test script found for ${{ matrix.features }}"
            exit 1
          fi

  validate-features:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli
        
      - name: Validate all features
        run: |
          for feature in src/*/; do
            feature_name=$(basename "$feature")
            echo "Checking feature structure: $feature_name"
            if [ -f "$feature/devcontainer-feature.json" ]; then
              echo "✓ Found devcontainer-feature.json for $feature_name"
              # Check if JSON is valid
              if jq empty "$feature/devcontainer-feature.json" 2>/dev/null; then
                echo "✓ Valid JSON for $feature_name"
              else
                echo "✗ Invalid JSON for $feature_name"
                exit 1
              fi
            else
              echo "✗ Missing devcontainer-feature.json for $feature_name"
              exit 1
            fi
            if [ -f "$feature/install.sh" ]; then
              echo "✓ Found install.sh for $feature_name"
            else
              echo "✗ Missing install.sh for $feature_name"
              exit 1
            fi
          done

  test-scenarios:
    runs-on: ubuntu-latest
    needs: [test, validate-features]
    strategy:
      matrix:
        scenario:
          # Only test scenarios for features without external dependencies
          - alpine-build-base
          - alpine-git
          - alpine-jq
          - alpine-make
          - alpine-node
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test scenario '${{ matrix.scenario }}'
        run: |
          echo "Testing scenario: ${{ matrix.scenario }}"
          if [ -f "./test/${{ matrix.scenario }}/scenarios.json" ]; then
            # Run scenario tests for features that have them
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.scenario }} \
              --base-image alpine:latest \
              --skip-autogenerated \
              --log-level debug
          else
            echo "No scenarios.json found for ${{ matrix.scenario }}, skipping scenario tests"
            exit 0
          fi
