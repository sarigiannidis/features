name: "Test Features"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      base-features: ${{ steps.categorize.outputs.base-features }}
      features-with-published-deps: ${{ steps.categorize.outputs.features-with-published-deps }}
      features-with-local-deps: ${{ steps.categorize.outputs.features-with-local-deps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check dependency availability and categorize features
        id: categorize
        run: |
          echo "Checking which dependencies are published..."
          
          base_features=()
          features_with_published_deps=()
          features_with_local_deps=()
          
          # Function to check if a feature is published
          check_published() {
            local feature_ref="$1"
            local version="$2"
            
            # Extract registry, namespace, and feature name from the reference
            # Format: ghcr.io/sarigiannidis/features/feature-name:version
            if [[ "$feature_ref" =~ ghcr\.io/([^/]+/[^/]+)/([^:]+):(.+) ]]; then
              local namespace="${BASH_REMATCH[1]}"
              local feature_name="${BASH_REMATCH[2]}"
              local ref_version="${BASH_REMATCH[3]}"
              
              # Use GitHub API to check if the package exists
              local api_url="https://api.github.com/users/${namespace%/*}/packages/container/${namespace#*/}%2F${feature_name}/versions"
              
              echo "Checking: $api_url"
              if curl -s -f -H "Accept: application/vnd.github.v3+json" "$api_url" | jq -e '.[] | select(.metadata.container.tags[] | contains("'"$ref_version"'"))' > /dev/null 2>&1; then
                echo "✓ Published: $feature_ref"
                return 0
              else
                echo "✗ Not published: $feature_ref"
                return 1
              fi
            fi
            return 1
          }
          
          # Process each feature
          for feature_dir in src/*/; do
            feature_name=$(basename "$feature_dir")
            feature_json="$feature_dir/devcontainer-feature.json"
            
            if [ -f "$feature_json" ]; then
              echo "Processing feature: $feature_name"
              
              # Check if feature has dependencies
              if jq -e '.dependsOn' "$feature_json" > /dev/null 2>&1; then
                echo "Feature $feature_name has dependencies"
                
                # Get all dependencies
                dependencies=$(jq -r '.dependsOn | keys[]' "$feature_json" 2>/dev/null || echo "")
                all_deps_published=true
                
                for dep in $dependencies; do
                  echo "Checking dependency: $dep"
                  # For now, assume any dependency starting with ghcr.io/sarigiannidis/features is local
                  if [[ "$dep" == ghcr.io/sarigiannidis/features/* ]]; then
                    echo "Local dependency detected: $dep"
                    all_deps_published=false
                    break
                  fi
                done
                
                if [ "$all_deps_published" = true ]; then
                  features_with_published_deps+=("$feature_name")
                  echo "✓ All dependencies published for $feature_name"
                else
                  features_with_local_deps+=("$feature_name")
                  echo "✗ Has unpublished dependencies: $feature_name"
                fi
              else
                echo "Feature $feature_name has no dependencies"
                base_features+=("$feature_name")
              fi
            fi
          done
          
          # Convert arrays to JSON format for GitHub Actions
          base_features_json=$(printf '%s\n' "${base_features[@]}" | jq -R -s -c 'split("\n")[:-1]')
          features_with_published_deps_json=$(printf '%s\n' "${features_with_published_deps[@]}" | jq -R -s -c 'split("\n")[:-1]')
          features_with_local_deps_json=$(printf '%s\n' "${features_with_local_deps[@]}" | jq -R -s -c 'split("\n")[:-1]')
          
          echo "base-features=$base_features_json" >> $GITHUB_OUTPUT
          echo "features-with-published-deps=$features_with_published_deps_json" >> $GITHUB_OUTPUT
          echo "features-with-local-deps=$features_with_local_deps_json" >> $GITHUB_OUTPUT
          
          echo "=== CATEGORIZATION RESULTS ==="
          echo "Base features (no dependencies): ${base_features[*]}"
          echo "Features with published dependencies: ${features_with_published_deps[*]}"
          echo "Features with local dependencies: ${features_with_local_deps[*]}"

  test-base-features:
    runs-on: ubuntu-latest
    continue-on-error: false
    needs: check-dependencies
    if: ${{ fromJson(needs.check-dependencies.outputs.base-features)[0] != null }}
    strategy:
      matrix:
        features: ${{ fromJson(needs.check-dependencies.outputs.base-features) }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test feature '${{ matrix.features }}'
        id: test
        run: |
          echo "Testing base feature: ${{ matrix.features }}"
          if [ -f "./test/${{ matrix.features }}/scenarios.json" ]; then
            echo "Running scenario-based test for ${{ matrix.features }}..."
            # Use scenarios.json for testing when available
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.features }} \
              --base-image alpine:latest \
              --skip-autogenerated \
              --log-level debug
          elif [ -f "./test/${{ matrix.features }}/test.sh" ]; then
            echo "Running custom test script for ${{ matrix.features }}..."
            # Copy test script to root for devcontainer CLI to find it
            cp "./test/${{ matrix.features }}/test.sh" ./test.sh
            chmod +x ./test.sh
            
            # Run the test
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.features }} \
              --base-image alpine:latest \
              --skip-scenarios \
              --log-level debug
            
            # Clean up
            rm -f ./test.sh
          else
            echo "Running basic installation test for ${{ matrix.features }}..."
            # Create a minimal test script
            cat > ./test.sh << 'TESTEOF'
          #!/bin/bash
          set -e
          echo "Testing feature installation..."
          if command -v git >/dev/null 2>&1; then
            echo "✓ Git is installed: $(git --version)"
          else
            echo "✗ Git is not installed"
            exit 1
          fi
          echo "Installation test passed!"
          TESTEOF
            chmod +x ./test.sh
            
            # Run the test
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.features }} \
              --base-image alpine:latest \
              --skip-scenarios \
              --log-level debug
            
            # Clean up
            rm -f ./test.sh
          fi

  test-features-with-published-dependencies:
    runs-on: ubuntu-latest
    continue-on-error: false
    needs: [check-dependencies, test-base-features]
    if: ${{ fromJson(needs.check-dependencies.outputs.features-with-published-deps)[0] != null }}
    strategy:
      matrix:
        features: ${{ fromJson(needs.check-dependencies.outputs.features-with-published-deps) }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test feature '${{ matrix.features }}'
        id: test
        run: |
          echo "Testing feature with published dependencies: ${{ matrix.features }}"
          if [ -f "./test/${{ matrix.features }}/scenarios.json" ]; then
            echo "Running scenario-based test for ${{ matrix.features }}..."
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.features }} \
              --base-image alpine:latest \
              --skip-autogenerated \
              --log-level debug
          elif [ -f "./test/${{ matrix.features }}/test.sh" ]; then
            echo "Running custom test script for ${{ matrix.features }}..."
            cp "./test/${{ matrix.features }}/test.sh" ./test.sh
            chmod +x ./test.sh
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.features }} \
              --base-image alpine:latest \
              --skip-scenarios \
              --log-level debug
            rm -f ./test.sh
          else
            echo "No test configuration found for ${{ matrix.features }}"
            exit 1
          fi

  test-features-with-local-dependencies:
    runs-on: ubuntu-latest
    continue-on-error: false
    needs: [check-dependencies, test-base-features]
    if: ${{ fromJson(needs.check-dependencies.outputs.features-with-local-deps)[0] != null }}
    strategy:
      matrix:
        features: ${{ fromJson(needs.check-dependencies.outputs.features-with-local-deps) }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test feature '${{ matrix.features }}' with local dependencies
        id: test
        run: |
          echo "Testing feature with local dependencies: ${{ matrix.features }}"
          if [ -f "./test/${{ matrix.features }}/test.sh" ]; then
            echo "Running test script directly for ${{ matrix.features }}..."
            # Run the test script directly since dependencies aren't published
            cd "./test/${{ matrix.features }}"
            chmod +x test.sh
            ./test.sh
          else
            echo "No test script found for ${{ matrix.features }}"
            exit 1
          fi

  validate-features:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli
        
      - name: Validate all features
        run: |
          for feature in src/*/; do
            feature_name=$(basename "$feature")
            echo "Checking feature structure: $feature_name"
            if [ -f "$feature/devcontainer-feature.json" ]; then
              echo "✓ Found devcontainer-feature.json for $feature_name"
              # Check if JSON is valid
              if jq empty "$feature/devcontainer-feature.json" 2>/dev/null; then
                echo "✓ Valid JSON for $feature_name"
              else
                echo "✗ Invalid JSON for $feature_name"
                exit 1
              fi
            else
              echo "✗ Missing devcontainer-feature.json for $feature_name"
              exit 1
            fi
            if [ -f "$feature/install.sh" ]; then
              echo "✓ Found install.sh for $feature_name"
            else
              echo "✗ Missing install.sh for $feature_name"
              exit 1
            fi
          done

  test-scenarios:
    runs-on: ubuntu-latest
    needs: [check-dependencies, test-base-features, test-features-with-published-dependencies, test-features-with-local-dependencies, validate-features]
    if: always() && !cancelled() && !failure()
    strategy:
      matrix:
        scenario:
          # Only test scenarios for features without external dependencies
          - alpine-build-base
          - alpine-git
          - alpine-jq
          - alpine-make
          - alpine-node
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test scenario '${{ matrix.scenario }}'
        run: |
          echo "Testing scenario: ${{ matrix.scenario }}"
          if [ -f "./test/${{ matrix.scenario }}/scenarios.json" ]; then
            # Run scenario tests for features that have them
            devcontainer features test \
              --project-folder . \
              --features ${{ matrix.scenario }} \
              --base-image alpine:latest \
              --skip-autogenerated \
              --log-level debug
          else
            echo "No scenarios.json found for ${{ matrix.scenario }}, skipping scenario tests"
            exit 0
          fi
